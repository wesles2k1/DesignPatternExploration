Start Date:
    10/6/2023
    
Description:
    Last updated: 10/12/2023

    This implementation of the Maze program is an attempt at combining the Abstract Factory (and, by extention, the Factory Method) and Singleton design patterns together to develop a maze generator.

    A generalized Singleton class is utilized by the MapFactory hierarchy, so that different MapFactories that create different sets of Map elements each can have their own, one-of-a-kind instance. More regarding the Singleton class can be found in its README file. MazeGame's BuildMaze may take in a factory or a list of factories and corresponding weights to how often they are used in the maze's generation.

    This has been designed in a way so that new MapFactories may be easily added. To do so:
        * Derive from a MapFactory and override any factory methods desired, possibly creating custom map elements to use if desired.
        * Implement Singleton functionality to your new MapFactory (instructions in Singleton's README)
        * Update MapType (instructions in MapType.h)

    Currently, while the components of a map may be randomized based on the Map types provided, it is currently hardcoded to generate two adjacent rooms, connected with a single door. Eventually, algorithms will be implemented to randomly generate a maze's structure of rooms, doors, and walls. If multiple algorithms/methods of generation are developed, an extra parameter will be added to BuildMaze to specify how it may be generated/shaped.

    This program, while functioning as a C++ program in a terminal, will eventually be refactored to be used in Unreal Engine to generate a visual maze that a player may walk around in. It is planned that Unreal Engine will use MazeGame as a way to generate and retreive a maze via BuildMaze for it to construct in a level.

    When running the game (via RunGame()), simple options will be provided.

Notes:
    This program does not yet deallocate memory.

Problems/Questions (focused on the MapFactory hierarchy):
    Static Memory Management:
        My Singleton is of pointers, but Singleton itself is never instantiated. How do I manage this? I don't think the destructor is ever called, when do I (if I at all) delete the pointers?
    Makefile:
        How can I clean up my Makefile? The compilation of object files is already pretty long and ridiculous, but it's only going to grow. Otherwise, I think I'm happy with my project structure here.
        Also are my includes good? I try including only the corresponding header file within a .cpp file, while the .h has all the other includes that it and its .cpp file needs. Is this good practice? It also seems to make the object compilation within the Makefile considerably more streamlined than listing .h after .h. I think my biggest concern at this point is accidently running into circular dependency. Can this be avoided by being aware of what relies on what and taking care to only have dependencies where absolutely necessary as a design?