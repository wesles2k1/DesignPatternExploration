Start Date:
    10/6/2023
    
Description:
    Last updated: 10/12/2023

    This implementation of the Maze program is an attempt at combining the Abstract Factory (and, by extention, the Factory Method) and Singleton design patterns together to develop a maze generator.

    A generalized Singleton class is utilized by the MapFactory hierarchy, so that different MapFactories that create different sets of Map elements each can have their own, one-of-a-kind instance. More regarding the Singleton class can be found in its README file. MazeGame's BuildMaze may take in a factory or a list of factories and corresponding weights to how often they are used in the maze's generation.

    This has been designed in a way so that new MapFactories may be easily added. To do so:
        * Derive from a MapFactory and override any factory methods desired, possibly creating custom map elements to use if desired.
        * Implement Singleton functionality to your new MapFactory (instructions in Singleton's README)
        * Update MapType (instructions in MapType.h)

    Currently, while the components of a map may be randomized based on the Map types provided, it is currently hardcoded to generate two adjacent rooms, connected with a single door. Eventually, algorithms will be implemented to randomly generate a maze's structure of rooms, doors, and walls. If multiple algorithms/methods of generation are developed, an extra parameter will be added to BuildMaze to specify how it may be generated/shaped.

    This program, while functioning as a C++ program in a terminal, will eventually be refactored to be used in Unreal Engine to generate a visual maze that a player may walk around in. It is planned that Unreal Engine will use MazeGame as a way to generate and retreive a maze via BuildMaze for it to construct in a level.

    When running the game (via RunGame()), simple options will be provided.

Notes:
    This program does not yet deallocate memory.

Problems/Questions (focused on the MapFactory hierarchy):
    Singleton:
        There are a couple of concerns regarding the Singleton in its README file.
    MapType's MapTypeEnum():
        This has the purpose of allowing assignment operators with literal MapTypeEnums, but I'm not quite sure what exactly this line is doing and would like to know how it works.
    MazeGame.BuildMaze( { {}, {} } ):
        This counts as a valid call to BuildMaze. I'm not quite sure how to check for this to guard against it, and it makes me wonder if there are any other cases I'm overlooking that I should be safeguarding against.
    Player Creation:
        Although I haven't looked very much into it, I cannot remove MapFactory's MakePlayer factory method or use a new MakePlayer factory method within MazeGame. It makes sense to me that the MapFactory shouldn't be concerned about the Player, and Player is not something that should be overriden by derived MapFactories. It should be in MazeGame, but I am restricted from doing so for now.