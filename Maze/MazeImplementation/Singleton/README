Singleton is a generallized "static class" that holds and makes sure only one unique instance of a class is instantiated via the singleton design pattern.
This class allows for parent-children coexistance; for example, a class and it's parent class may both have a stored instantiation, despite technically having two instances of type Parent.

To use Singleton: 
    1. Privatize/Protect Your Constructor
    Lock YourClass's constructor(s) by making it protected or private.
    (While a private/protected constructor is not required for Singleton to function properly with YourClass, failing to do this will allow normal instantiation of YourClass, which likely will defeat the whole point of using Singleton. Despite this, there may be times you might want a public constructor so as to allow instantiation of YourClass, but utilize a psudo-globally-accessible uniqueInstance to work with.)
    2. Declare Siongleton as a Friend
    Give Singleton access to the constructor(s) by declaring Singleton as a friend of YourClass with:
        friend class Singleton();
    3. Usage
    Use the Singleton functionality with:
        Singleton::Get<YourClass>();
    to get (and instantiate if necessary) a pointer to the one and only instance of YourClass.

Notes/Questions:
    Constructor Definition Requirement:
        For some reason, classes that declare Singleton as a friend MUST provide a definition to its constructor; whether it's
        YourClass() {};
        in the header file, or
        YourClass::YourClass() {};
        in the implementation file. Simply
        YourClass();
        in the header file will not do and will cause an undefined reference error. I wonder why this is? It appears to work fine, regardless.
    Best Way to Declare Friend:
        I can give instructions to declare Singleton a friend, but which of the following two ways are better?
            friend class Singleton;
            friend YourClass* Singleton::Get<YourClass>();
        The second option ensures only Get works. But, the first option is straight up copy-pastable, no change needed for each class. Plus, is it really that bad that Singleton gets access to all private/protected members of a class that it knows nothing about? I believe the first is optimal: easy to read, easy to implement, and it works. But, the second option works, too.
        Currently, the first is used.